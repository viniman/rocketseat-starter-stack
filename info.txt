yarn init

possibilidade de trabalhar com a interface de linha de comando do babel:
yarn add @babel/cli

yarn add @babel/preset-env


Arquivo de configuração do babel:
.babelrc


yarn add @babel/core




yarn dev



-w : automatico, vai ficar monitorando
"dev": "babel ./main.js -o ./bundle.js -w"



rest/spread
yarn add @babel/plugin-proposal-object-rest-spread



yarn dev


REST -> pegar o resto das outras variaveis ...resto



-> webpack
yarn add webpack webpack-cli -D


Criar webpack.config.js: Arquivo principal de configuração do webpack


yarn add babel-loader -D


Executar o webpack: yarn dev


pode ter um export default e vários exports sem default


pasta src: todos arquivos que o webpack precisa monitorar
public: que nao precisa monitorar



yarn add webpack-dev-server -D



Comando para colocar ele na web em servidor:
"build": "webpack --mode=production" -> comando para produção

Trabalhar com o nosso projeto offline: o dev server dá um refresh automaticamente na página
"dev": "webpack-dev-server --mode=development",


Biblioteca para trabalhar com async/await: deixa o código muito mais limpo
- Não precisa código com muito callback, utilizando cascata com then e catch


yarn add @babel/plugin-transform-async-to-generator -D
yarn add @babel/polyfill -D


-D : instala como dependencia de desenvolvimento


Quando usa async function, automaticamente ela vira uma promise

Só consegue usar o await se estiver dentro de uma função com async







Biblioteca Axios: trabalhar com uma Biblioteca com requisições assincronas
yarn add axios -> não é dependencia de desenvolvimento entao nao precisa do -D

axios.get e todas as funcoes do axios retornam promises









------------------------------------
           CURSO NODE
------------------------------------

npm init -y

vai criar package.json : guarda dependencias

npm install express : micro framework para lidar com rotas e views

package-lock.json : apenas para cash - saber quais dependencias estao instaladas

node server.js

req = todas as informações sobre a requisição
res = resposta que vai dar para o cliente/navegador


npm install -D nodemon
Nodemon: faz reinicialização do servidor quando alterar alguma coisa no código do servidor

package.json devDependences(-D): dependencias usadas apenas no ambiente de desenvolvimento


"dev": "nodemon server.js"
Agora roda com: npm run dev




------------------------------------
         MONGO DB | DOCKER
------------------------------------


install docker
https://docs.docker.com/engine/install/ubuntu/


install mongo db on docker
docker pull mongo

Subir uma nova máquina virtual/container contendo essa instalação rodando
docker run --name mongodb -p 27017:27017 -d mongo

-p :redirecionamento de porta (pois o conteiner será uma outra máquina)
Ao acessar a porta 27017 da máquina, vai acessar a porta 27017 do container do mongodb
27017: porta padrão do mongodb
-d: qual imagem quero utilizar

docker ps: quais imagens estão rodando

Utilizar Robo3T
https://robomongo.org/

Imagens docker que estão pausadas, não estão rodando/online
docker ps -a (vai retornar all)


Apenas executar (não precisa dar run novamente)
docker start mongo


mongodb: http://localhost:27017/


Dependencia de produção
Mongoose: ORM de bancos não relacionais com o mongodb
ORM Encapsula a lógica das operações do BD através do código
Em vez de usar SQL, sempre vai usar apenas códigos javascripts pra fazer os SQL
ORM: Object-relational mapping: Mapeamento objeto-relacional
npm install mongoose


Se tiver usuário e senha
mongoose.connect('mongodb://user:password@localhost:27017/nodeapi');



Require dos models
Fazer require automático em todos os arquivos de um diretório
npm install require-dir


MVC = model view controller

json = java script object notation



Software para testar as rotas da API: Insomnia
https://insomnia.rest/


Criar um pagination
npm install mongoose-paginate


Mata todos os processos node:
killall -9 node


Permitir acesso à API por outros dominios: CORS
Permitir todo tipo de acesso externo
npm install cors





------------------------------------
              REACT
------------------------------------

manipular a DOM
Criar SPAs = single page applications
Flexibilidade e organização fundamental
Não usa um simples HTML, é um JSX
Manipular código HTML pelo JavaScript


npm install -g create-react-app
-g --global: instalar de modo global


Rodar a aplicação
npm start


Conceito de componentização (components)
index.js : primeiro arquivo aberto pela aplicação do React

Component é um conjunto de parte visual (que é o nosso HTML, parte estrutural), a parte código,
que é a parte funcional em JS e a parte de estilização que é o CSS


Acessar informações de um uma API rest de endereço externo: usar axios
yarn add axios




React tem métodos de ciclo de vida: são métodos que executam automaticamente baseado
no ciclo de vida, ciclo de montagem do próprio componente na tela


Arrow function não sobrescreve o valor do this, continua sendo da classe pai


Criação de variavel de estado
o código ouve que teve uma alteração no código
e que a variavel foi alterada
então ele recalcula automaticamente

O método render vai ficar sempre escutando a alteração das variaveis dentro
da variavel de estado, e sempre que o estado alterar, o método render executa de novo
e traz as alterações em tela





Parte de navegação da aplicação
Biblioteca utilizada para fazer a navegação
yarn react-router-dom


BrowserRouter: definir que esta utilizando as rotas atraves de um browser

Switch: permitir que apenas uma rota seja chamada ao mesmo tempo



API http://localhost:3001/api/products?page=2


------------------------------------
            REACT NATIVE
------------------------------------


Install Android JDK
https://react-native.rocketseat.dev/android/linux

Emulador
https://react-native.rocketseat.dev/android/emulador


Executando app via smartphone
https://react-native.rocketseat.dev/usb/android
https://medium.com/codespace69/react-native-run-react-native-got-error-sdk-location-not-found-5ff2116269ec


Criar aplicação
npx react-native init huntapp

Start Metro Bundler [Dev Server]
npx react-native start

Rodar app
npx react-native run-android
yarn run react-native run-android
yarn android

Dar reload no app: duplo clique no R

Debug Mode: Ctrl + M (ou no dispositivo fisico shake)

index.js é o arquivo introdutório da aplicação/principal
É o arquivo que vai carregar assim que a aplicação for montada

app.json: nome da aplicação mostrada para o usuário

AppRegistry utilizado uma unica vez em toda a aplicação
Registra um arquivo para ser o arquivo inicial da aplicação

Importa para ser o arquivo inicial: App.js

flexBoxLayout: forma de definir estilos no react/vindo do css3

Todos elementos tem automaticamente o display: flex



Parte de navegação
yarn add react navigation